{"version":1,"defects":{"BlueM\\Tree\\NodeTest::tryingToGetANonExistentPropertyUsingGetThrowsAnException":4,"BlueM\\Tree\\NodeTest::tryingToGetANonExistentPropertyUsingMagicMethodThrowsAnException":4,"BlueM\\Tree\\NodeTest::anExceptionIsThrownWhenAccessingAnInexistentMagicProperty":4,"BlueM\\TreeTest::anExceptionIsThrownIfANonScalarValueShouldBeUsedAsRootId":4,"BlueM\\TreeTest::anExceptionIsThrownIfANonStringValueShouldBeUsedAsIdFieldName":4,"BlueM\\TreeTest::anExceptionIsThrownIfANonStringValueShouldBeUsedAsParentIdFieldName":4,"BlueM\\TreeTest::theRootNodesCanBeRetrieved":4,"BlueM\\TreeTest::theRootNodesCanBeRetrievedWhenTheIdsAreStrings":4,"BlueM\\TreeTest::anExceptionIsThrownWhenTryingToCreateATreeFromUnusableData":4,"BlueM\\TreeTest::theTreeCanBeSerializedToAJsonRepresentationFromWhichATreeWithTheSameDataCanBeBuiltWhenDecoded":3,"BlueM\\TreeTest::allNodesCanBeRetrieved":4,"BlueM\\TreeTest::allNodesCanBeRetrievedWhenNodeIdsAreStrings":4,"BlueM\\TreeTest::tryingToGetANodeByItsIdThrowsAnExceptionIfTheIdIsInvalid":4,"BlueM\\TreeTest::anExceptionIsThrownWhenAnInvalidParentIdIsReferenced":4,"BlueM\\TreeTest::anExceptionIsThrownWhenANodeWouldBeItsOwnParent":4,"BlueM\\TreeTest::anExceptionIsThrownWhenANodeWouldBeItsOwnParentWhenOwnIdAndParentIdHaveDifferentTypes":4,"BlueM\\TreeTest::clientsCanSupplyDifferingNamesForIdAndParentIdInInputData":4,"BlueM\\Tree\\NodeTest::aNodesAncestorsCanBeRetrieved":3,"BlueM\\Tree\\NodeTest::aNodesAncestorsCanBeRetrievedIncludingTheNodeItself":3,"BlueM\\TreeTest::inScalarContextTheTreeIsReturnedAsAString":3},"times":{"BlueM\\Tree\\NodeTest::thePreviousSiblingCanBeRetrieved":0.002,"BlueM\\Tree\\NodeTest::tryingToGetThePreviousSiblingReturnsNullWhenCalledOnTheFirstNode":0,"BlueM\\Tree\\NodeTest::theNextSiblingCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::allSiblingsCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::allSiblingsCanBeRetrievedIncludingTheNodeItself":0,"BlueM\\Tree\\NodeTest::allSiblingsCanBeRetrievedWhenMixedDataTypesAreUsedForTheIds":0,"BlueM\\Tree\\NodeTest::theChildNodesCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::whenTryingToGetTheChildNodesAnEmptyArrayIsReturnedIfThereAreNoChildNodes":0,"BlueM\\Tree\\NodeTest::aNodeCanTellHowManyChildrenItHas":0,"BlueM\\Tree\\NodeTest::aNodeCanTellIfItHasAnyChildNodes":0,"BlueM\\Tree\\NodeTest::theParentNodeCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::tryingToGetTheParentReturnsNullForTheRootNode":0,"BlueM\\Tree\\NodeTest::aChildCanBeAttachedToANode":0,"BlueM\\Tree\\NodeTest::theNodeIdCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::aNodePropertyCanBeFetchedUsingMethodGet":0,"BlueM\\Tree\\NodeTest::tryingToGetANonExistentPropertyUsingGetThrowsAnException":0,"BlueM\\Tree\\NodeTest::aNodePropertyCanBeFetchedUsingMagicMethod":0,"BlueM\\Tree\\NodeTest::tryingToGetANonExistentPropertyUsingMagicMethodThrowsAnException":0,"BlueM\\Tree\\NodeTest::theExistenceOfAPropertyCanBeCheckedUsingIssetFunction":0,"BlueM\\Tree\\NodeTest::nodePropertiesAreHandledCaseInsensitively":0,"BlueM\\Tree\\NodeTest::thePropertiesCanBeAccessUsingMagicProperties":0,"BlueM\\Tree\\NodeTest::anExceptionIsThrownWhenAccessingAnInexistentMagicProperty":0,"BlueM\\Tree\\NodeTest::thePropertiesCanBeFetchedAsAnArray":0,"BlueM\\Tree\\NodeTest::whenSerializingANodeToJsonItsArrayRepresentationIsUsed":0,"BlueM\\Tree\\NodeTest::inScalarContextTheNodeIsTypecastedToItsId":0,"BlueM\\Tree\\NodeTest::theLevelOfARootNodeIs0":0,"BlueM\\Tree\\NodeTest::aNode2LevelsBelowTheRootNodeHasLevel2":0,"BlueM\\Tree\\NodeTest::theRootNodesAncestorsIsAnEmptyArray":0,"BlueM\\Tree\\NodeTest::aNodesAncestorsCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::aNodesAncestorsCanBeRetrievedIncludingTheNodeItself":0,"BlueM\\Tree\\NodeTest::aNodesDescendantsCanBeRetrieved":0,"BlueM\\Tree\\NodeTest::aNodesDescendantsCanBeRetrievedIncludingTheNodeItself":0,"BlueM\\TreeTest::anExceptionIsThrownIfANonScalarValueShouldBeUsedAsRootId":0,"BlueM\\TreeTest::anExceptionIsThrownIfANonStringValueShouldBeUsedAsIdFieldName":0,"BlueM\\TreeTest::anExceptionIsThrownIfANonStringValueShouldBeUsedAsParentIdFieldName":0,"BlueM\\TreeTest::theRootNodesCanBeRetrieved":0.001,"BlueM\\TreeTest::theRootNodesCanBeRetrievedWhenTheIdsAreStrings":0,"BlueM\\TreeTest::theTreeCanBeRebuiltFromNewData":0,"BlueM\\TreeTest::anExceptionIsThrownWhenTryingToCreateATreeFromUnusableData":0,"BlueM\\TreeTest::aTreeCanBeCreatedFromAnIterable":0,"BlueM\\TreeTest::aTreeCanBeCreatedFromAnArrayOfObjectsImplementingIterator":0,"BlueM\\TreeTest::theTreeCanBeSerializedToAJsonRepresentationFromWhichATreeWithTheSameDataCanBeBuiltWhenDecoded":0,"BlueM\\TreeTest::allNodesCanBeRetrieved":0,"BlueM\\TreeTest::allNodesCanBeRetrievedWhenNodeIdsAreStrings":0,"BlueM\\TreeTest::aNodeCanBeAccessedByItsIntegerId":0,"BlueM\\TreeTest::aNodeCanBeAccessedByItsStringId":0,"BlueM\\TreeTest::tryingToGetANodeByItsIdThrowsAnExceptionIfTheIdIsInvalid":0,"BlueM\\TreeTest::aNodeCanBeAccessedByItsValuePath":0,"BlueM\\TreeTest::tryingToGetANodeByItsValuePathReturnsNullIfNoNodeMatches":0,"BlueM\\TreeTest::inScalarContextTheTreeIsReturnedAsAString":0,"BlueM\\TreeTest::anExceptionIsThrownWhenAnInvalidParentIdIsReferenced":0,"BlueM\\TreeTest::anExceptionIsThrownWhenANodeWouldBeItsOwnParent":0,"BlueM\\TreeTest::anExceptionIsThrownWhenANodeWouldBeItsOwnParentWhenOwnIdAndParentIdHaveDifferentTypes":0,"BlueM\\TreeTest::whenMixingNumericAndStringIdsNoExceptionIsThrownDueToImplicitTypecasting":0,"BlueM\\TreeTest::clientsCanSupplyDifferingNamesForIdAndParentIdInInputData":0}}